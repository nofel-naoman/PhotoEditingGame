"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-window";
exports.ids = ["vendor-chunks/react-window"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-window/dist/index.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-window/dist/index.esm.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FixedSizeGrid: () => (/* binding */ FixedSizeGrid),\n/* harmony export */   FixedSizeList: () => (/* binding */ FixedSizeList),\n/* harmony export */   VariableSizeGrid: () => (/* binding */ VariableSizeGrid),\n/* harmony export */   VariableSizeList: () => (/* binding */ VariableSizeList),\n/* harmony export */   areEqual: () => (/* binding */ areEqual),\n/* harmony export */   shouldComponentUpdate: () => (/* binding */ shouldComponentUpdate)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\");\n/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n\n\n\n\n\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\nvar hasNativePerformanceNow = typeof performance === \"object\" && typeof performance.now === \"function\";\nvar now = hasNativePerformanceNow ? function() {\n    return performance.now();\n} : function() {\n    return Date.now();\n};\nfunction cancelTimeout(timeoutID) {\n    cancelAnimationFrame(timeoutID.id);\n}\nfunction requestTimeout(callback, delay) {\n    var start = now();\n    function tick() {\n        if (now() - start >= delay) {\n            callback.call(null);\n        } else {\n            timeoutID.id = requestAnimationFrame(tick);\n        }\n    }\n    var timeoutID = {\n        id: requestAnimationFrame(tick)\n    };\n    return timeoutID;\n}\nvar size = -1; // This utility copied from \"dom-helpers\" package.\nfunction getScrollbarSize(recalculate) {\n    if (recalculate === void 0) {\n        recalculate = false;\n    }\n    if (size === -1 || recalculate) {\n        var div = document.createElement(\"div\");\n        var style = div.style;\n        style.width = \"50px\";\n        style.height = \"50px\";\n        style.overflow = \"scroll\";\n        document.body.appendChild(div);\n        size = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n    }\n    return size;\n}\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nfunction getRTLOffsetType(recalculate) {\n    if (recalculate === void 0) {\n        recalculate = false;\n    }\n    if (cachedRTLResult === null || recalculate) {\n        var outerDiv = document.createElement(\"div\");\n        var outerStyle = outerDiv.style;\n        outerStyle.width = \"50px\";\n        outerStyle.height = \"50px\";\n        outerStyle.overflow = \"scroll\";\n        outerStyle.direction = \"rtl\";\n        var innerDiv = document.createElement(\"div\");\n        var innerStyle = innerDiv.style;\n        innerStyle.width = \"100px\";\n        innerStyle.height = \"100px\";\n        outerDiv.appendChild(innerDiv);\n        document.body.appendChild(outerDiv);\n        if (outerDiv.scrollLeft > 0) {\n            cachedRTLResult = \"positive-descending\";\n        } else {\n            outerDiv.scrollLeft = 1;\n            if (outerDiv.scrollLeft === 0) {\n                cachedRTLResult = \"negative\";\n            } else {\n                cachedRTLResult = \"positive-ascending\";\n            }\n        }\n        document.body.removeChild(outerDiv);\n        return cachedRTLResult;\n    }\n    return cachedRTLResult;\n}\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\nvar defaultItemKey = function defaultItemKey(_ref) {\n    var columnIndex = _ref.columnIndex, data = _ref.data, rowIndex = _ref.rowIndex;\n    return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\nif (true) {\n    if (false) {}\n}\nfunction createGridComponent(_ref2) {\n    var _class;\n    var getColumnOffset = _ref2.getColumnOffset, getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset, getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex, getColumnWidth = _ref2.getColumnWidth, getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight, getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth, getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment, getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment, getRowHeight = _ref2.getRowHeight, getRowOffset = _ref2.getRowOffset, getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset, getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex, initInstanceProps = _ref2.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange, validateProps = _ref2.validateProps;\n    return _class = /*#__PURE__*/ function(_PureComponent) {\n        (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Grid, _PureComponent);\n        // Always use explicit constructor for React components.\n        // It produces less code after transpilation. (#26)\n        // eslint-disable-next-line no-useless-constructor\n        function Grid(props) {\n            var _this;\n            _this = _PureComponent.call(this, props) || this;\n            _this._instanceProps = initInstanceProps(_this.props, (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this));\n            _this._resetIsScrollingTimeoutId = null;\n            _this._outerRef = void 0;\n            _this.state = {\n                instance: (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this),\n                isScrolling: false,\n                horizontalScrollDirection: \"forward\",\n                scrollLeft: typeof _this.props.initialScrollLeft === \"number\" ? _this.props.initialScrollLeft : 0,\n                scrollTop: typeof _this.props.initialScrollTop === \"number\" ? _this.props.initialScrollTop : 0,\n                scrollUpdateWasRequested: false,\n                verticalScrollDirection: \"forward\"\n            };\n            _this._callOnItemsRendered = void 0;\n            _this._callOnItemsRendered = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function(overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n                return _this.props.onItemsRendered({\n                    overscanColumnStartIndex: overscanColumnStartIndex,\n                    overscanColumnStopIndex: overscanColumnStopIndex,\n                    overscanRowStartIndex: overscanRowStartIndex,\n                    overscanRowStopIndex: overscanRowStopIndex,\n                    visibleColumnStartIndex: visibleColumnStartIndex,\n                    visibleColumnStopIndex: visibleColumnStopIndex,\n                    visibleRowStartIndex: visibleRowStartIndex,\n                    visibleRowStopIndex: visibleRowStopIndex\n                });\n            });\n            _this._callOnScroll = void 0;\n            _this._callOnScroll = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function(scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n                return _this.props.onScroll({\n                    horizontalScrollDirection: horizontalScrollDirection,\n                    scrollLeft: scrollLeft,\n                    scrollTop: scrollTop,\n                    verticalScrollDirection: verticalScrollDirection,\n                    scrollUpdateWasRequested: scrollUpdateWasRequested\n                });\n            });\n            _this._getItemStyle = void 0;\n            _this._getItemStyle = function(rowIndex, columnIndex) {\n                var _this$props = _this.props, columnWidth = _this$props.columnWidth, direction = _this$props.direction, rowHeight = _this$props.rowHeight;\n                var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n                var key = rowIndex + \":\" + columnIndex;\n                var style;\n                if (itemStyleCache.hasOwnProperty(key)) {\n                    style = itemStyleCache[key];\n                } else {\n                    var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);\n                    var isRtl = direction === \"rtl\";\n                    itemStyleCache[key] = style = {\n                        position: \"absolute\",\n                        left: isRtl ? undefined : _offset,\n                        right: isRtl ? _offset : undefined,\n                        top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n                        height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n                        width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n                    };\n                }\n                return style;\n            };\n            _this._getItemStyleCache = void 0;\n            _this._getItemStyleCache = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function(_, __, ___) {\n                return {};\n            });\n            _this._onScroll = function(event) {\n                var _event$currentTarget = event.currentTarget, clientHeight = _event$currentTarget.clientHeight, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollTop = _event$currentTarget.scrollTop, scrollHeight = _event$currentTarget.scrollHeight, scrollWidth = _event$currentTarget.scrollWidth;\n                _this.setState(function(prevState) {\n                    if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n                        // Scroll position may have been updated by cDM/cDU,\n                        // In which case we don't need to trigger another render,\n                        // And we don't want to update state.isScrolling.\n                        return null;\n                    }\n                    var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n                    // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n                    // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n                    // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n                    var calculatedScrollLeft = scrollLeft;\n                    if (direction === \"rtl\") {\n                        switch(getRTLOffsetType()){\n                            case \"negative\":\n                                calculatedScrollLeft = -scrollLeft;\n                                break;\n                            case \"positive-descending\":\n                                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                                break;\n                        }\n                    } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n                    calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n                    var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n                    return {\n                        isScrolling: true,\n                        horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? \"forward\" : \"backward\",\n                        scrollLeft: calculatedScrollLeft,\n                        scrollTop: calculatedScrollTop,\n                        verticalScrollDirection: prevState.scrollTop < scrollTop ? \"forward\" : \"backward\",\n                        scrollUpdateWasRequested: false\n                    };\n                }, _this._resetIsScrollingDebounced);\n            };\n            _this._outerRefSetter = function(ref) {\n                var outerRef = _this.props.outerRef;\n                _this._outerRef = ref;\n                if (typeof outerRef === \"function\") {\n                    outerRef(ref);\n                } else if (outerRef != null && typeof outerRef === \"object\" && outerRef.hasOwnProperty(\"current\")) {\n                    outerRef.current = ref;\n                }\n            };\n            _this._resetIsScrollingDebounced = function() {\n                if (_this._resetIsScrollingTimeoutId !== null) {\n                    cancelTimeout(_this._resetIsScrollingTimeoutId);\n                }\n                _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n            };\n            _this._resetIsScrolling = function() {\n                _this._resetIsScrollingTimeoutId = null;\n                _this.setState({\n                    isScrolling: false\n                }, function() {\n                    // Clear style cache after state update has been committed.\n                    // This way we don't break pure sCU for items that don't use isScrolling param.\n                    _this._getItemStyleCache(-1);\n                });\n            };\n            return _this;\n        }\n        Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n            validateSharedProps(nextProps, prevState);\n            validateProps(nextProps);\n            return null;\n        };\n        var _proto = Grid.prototype;\n        _proto.scrollTo = function scrollTo(_ref3) {\n            var scrollLeft = _ref3.scrollLeft, scrollTop = _ref3.scrollTop;\n            if (scrollLeft !== undefined) {\n                scrollLeft = Math.max(0, scrollLeft);\n            }\n            if (scrollTop !== undefined) {\n                scrollTop = Math.max(0, scrollTop);\n            }\n            this.setState(function(prevState) {\n                if (scrollLeft === undefined) {\n                    scrollLeft = prevState.scrollLeft;\n                }\n                if (scrollTop === undefined) {\n                    scrollTop = prevState.scrollTop;\n                }\n                if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n                    return null;\n                }\n                return {\n                    horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? \"forward\" : \"backward\",\n                    scrollLeft: scrollLeft,\n                    scrollTop: scrollTop,\n                    scrollUpdateWasRequested: true,\n                    verticalScrollDirection: prevState.scrollTop < scrollTop ? \"forward\" : \"backward\"\n                };\n            }, this._resetIsScrollingDebounced);\n        };\n        _proto.scrollToItem = function scrollToItem(_ref4) {\n            var _ref4$align = _ref4.align, align = _ref4$align === void 0 ? \"auto\" : _ref4$align, columnIndex = _ref4.columnIndex, rowIndex = _ref4.rowIndex;\n            var _this$props2 = this.props, columnCount = _this$props2.columnCount, height = _this$props2.height, rowCount = _this$props2.rowCount, width = _this$props2.width;\n            var _this$state = this.state, scrollLeft = _this$state.scrollLeft, scrollTop = _this$state.scrollTop;\n            var scrollbarSize = getScrollbarSize();\n            if (columnIndex !== undefined) {\n                columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n            }\n            if (rowIndex !== undefined) {\n                rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n            }\n            var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n            var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n            // to ensure it's fully visible.\n            // But we only need to account for its size when it's actually visible.\n            var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n            var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n            this.scrollTo({\n                scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n                scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n            });\n        };\n        _proto.componentDidMount = function componentDidMount() {\n            var _this$props3 = this.props, initialScrollLeft = _this$props3.initialScrollLeft, initialScrollTop = _this$props3.initialScrollTop;\n            if (this._outerRef != null) {\n                var outerRef = this._outerRef;\n                if (typeof initialScrollLeft === \"number\") {\n                    outerRef.scrollLeft = initialScrollLeft;\n                }\n                if (typeof initialScrollTop === \"number\") {\n                    outerRef.scrollTop = initialScrollTop;\n                }\n            }\n            this._callPropsCallbacks();\n        };\n        _proto.componentDidUpdate = function componentDidUpdate() {\n            var direction = this.props.direction;\n            var _this$state2 = this.state, scrollLeft = _this$state2.scrollLeft, scrollTop = _this$state2.scrollTop, scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n            if (scrollUpdateWasRequested && this._outerRef != null) {\n                // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n                // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n                // So we need to determine which browser behavior we're dealing with, and mimic it.\n                var outerRef = this._outerRef;\n                if (direction === \"rtl\") {\n                    switch(getRTLOffsetType()){\n                        case \"negative\":\n                            outerRef.scrollLeft = -scrollLeft;\n                            break;\n                        case \"positive-ascending\":\n                            outerRef.scrollLeft = scrollLeft;\n                            break;\n                        default:\n                            var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;\n                            outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n                            break;\n                    }\n                } else {\n                    outerRef.scrollLeft = Math.max(0, scrollLeft);\n                }\n                outerRef.scrollTop = Math.max(0, scrollTop);\n            }\n            this._callPropsCallbacks();\n        };\n        _proto.componentWillUnmount = function componentWillUnmount() {\n            if (this._resetIsScrollingTimeoutId !== null) {\n                cancelTimeout(this._resetIsScrollingTimeoutId);\n            }\n        };\n        _proto.render = function render() {\n            var _this$props4 = this.props, children = _this$props4.children, className = _this$props4.className, columnCount = _this$props4.columnCount, direction = _this$props4.direction, height = _this$props4.height, innerRef = _this$props4.innerRef, innerElementType = _this$props4.innerElementType, innerTagName = _this$props4.innerTagName, itemData = _this$props4.itemData, _this$props4$itemKey = _this$props4.itemKey, itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey, outerElementType = _this$props4.outerElementType, outerTagName = _this$props4.outerTagName, rowCount = _this$props4.rowCount, style = _this$props4.style, useIsScrolling = _this$props4.useIsScrolling, width = _this$props4.width;\n            var isScrolling = this.state.isScrolling;\n            var _this$_getHorizontalR = this._getHorizontalRangeToRender(), columnStartIndex = _this$_getHorizontalR[0], columnStopIndex = _this$_getHorizontalR[1];\n            var _this$_getVerticalRan = this._getVerticalRangeToRender(), rowStartIndex = _this$_getVerticalRan[0], rowStopIndex = _this$_getVerticalRan[1];\n            var items = [];\n            if (columnCount > 0 && rowCount) {\n                for(var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++){\n                    for(var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++){\n                        items.push(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(children, {\n                            columnIndex: _columnIndex,\n                            data: itemData,\n                            isScrolling: useIsScrolling ? isScrolling : undefined,\n                            key: itemKey({\n                                columnIndex: _columnIndex,\n                                data: itemData,\n                                rowIndex: _rowIndex\n                            }),\n                            rowIndex: _rowIndex,\n                            style: this._getItemStyle(_rowIndex, _columnIndex)\n                        }));\n                    }\n                }\n            } // Read this value AFTER items have been created,\n            // So their actual sizes (if variable) are taken into consideration.\n            var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n            var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(outerElementType || outerTagName || \"div\", {\n                className: className,\n                onScroll: this._onScroll,\n                ref: this._outerRefSetter,\n                style: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n                    position: \"relative\",\n                    height: height,\n                    width: width,\n                    overflow: \"auto\",\n                    WebkitOverflowScrolling: \"touch\",\n                    willChange: \"transform\",\n                    direction: direction\n                }, style)\n            }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(innerElementType || innerTagName || \"div\", {\n                children: items,\n                ref: innerRef,\n                style: {\n                    height: estimatedTotalHeight,\n                    pointerEvents: isScrolling ? \"none\" : undefined,\n                    width: estimatedTotalWidth\n                }\n            }));\n        };\n        _proto._callPropsCallbacks = function _callPropsCallbacks() {\n            var _this$props5 = this.props, columnCount = _this$props5.columnCount, onItemsRendered = _this$props5.onItemsRendered, onScroll = _this$props5.onScroll, rowCount = _this$props5.rowCount;\n            if (typeof onItemsRendered === \"function\") {\n                if (columnCount > 0 && rowCount > 0) {\n                    var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(), _overscanColumnStartIndex = _this$_getHorizontalR2[0], _overscanColumnStopIndex = _this$_getHorizontalR2[1], _visibleColumnStartIndex = _this$_getHorizontalR2[2], _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n                    var _this$_getVerticalRan2 = this._getVerticalRangeToRender(), _overscanRowStartIndex = _this$_getVerticalRan2[0], _overscanRowStopIndex = _this$_getVerticalRan2[1], _visibleRowStartIndex = _this$_getVerticalRan2[2], _visibleRowStopIndex = _this$_getVerticalRan2[3];\n                    this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n                }\n            }\n            if (typeof onScroll === \"function\") {\n                var _this$state3 = this.state, _horizontalScrollDirection = _this$state3.horizontalScrollDirection, _scrollLeft = _this$state3.scrollLeft, _scrollTop = _this$state3.scrollTop, _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested, _verticalScrollDirection = _this$state3.verticalScrollDirection;\n                this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n            }\n        } // Lazily create and cache item styles while scrolling,\n        ;\n        _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n            var _this$props6 = this.props, columnCount = _this$props6.columnCount, overscanColumnCount = _this$props6.overscanColumnCount, overscanColumnsCount = _this$props6.overscanColumnsCount, overscanCount = _this$props6.overscanCount, rowCount = _this$props6.rowCount;\n            var _this$state4 = this.state, horizontalScrollDirection = _this$state4.horizontalScrollDirection, isScrolling = _this$state4.isScrolling, scrollLeft = _this$state4.scrollLeft;\n            var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n            if (columnCount === 0 || rowCount === 0) {\n                return [\n                    0,\n                    0,\n                    0,\n                    0\n                ];\n            }\n            var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n            var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n            // If there isn't at least one extra item, tab loops back around.\n            var overscanBackward = !isScrolling || horizontalScrollDirection === \"backward\" ? Math.max(1, overscanCountResolved) : 1;\n            var overscanForward = !isScrolling || horizontalScrollDirection === \"forward\" ? Math.max(1, overscanCountResolved) : 1;\n            return [\n                Math.max(0, startIndex - overscanBackward),\n                Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n                startIndex,\n                stopIndex\n            ];\n        };\n        _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n            var _this$props7 = this.props, columnCount = _this$props7.columnCount, overscanCount = _this$props7.overscanCount, overscanRowCount = _this$props7.overscanRowCount, overscanRowsCount = _this$props7.overscanRowsCount, rowCount = _this$props7.rowCount;\n            var _this$state5 = this.state, isScrolling = _this$state5.isScrolling, verticalScrollDirection = _this$state5.verticalScrollDirection, scrollTop = _this$state5.scrollTop;\n            var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n            if (columnCount === 0 || rowCount === 0) {\n                return [\n                    0,\n                    0,\n                    0,\n                    0\n                ];\n            }\n            var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n            var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n            // If there isn't at least one extra item, tab loops back around.\n            var overscanBackward = !isScrolling || verticalScrollDirection === \"backward\" ? Math.max(1, overscanCountResolved) : 1;\n            var overscanForward = !isScrolling || verticalScrollDirection === \"forward\" ? Math.max(1, overscanCountResolved) : 1;\n            return [\n                Math.max(0, startIndex - overscanBackward),\n                Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n                startIndex,\n                stopIndex\n            ];\n        };\n        return Grid;\n    }(react__WEBPACK_IMPORTED_MODULE_3__.PureComponent), _class.defaultProps = {\n        direction: \"ltr\",\n        itemData: undefined,\n        useIsScrolling: false\n    }, _class;\n}\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n    var children = _ref5.children, direction = _ref5.direction, height = _ref5.height, innerTagName = _ref5.innerTagName, outerTagName = _ref5.outerTagName, overscanColumnsCount = _ref5.overscanColumnsCount, overscanCount = _ref5.overscanCount, overscanRowsCount = _ref5.overscanRowsCount, width = _ref5.width;\n    var instance = _ref6.instance;\n    if (true) {\n        if (typeof overscanCount === \"number\") {\n            if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n                devWarningsOverscanCount.add(instance);\n                console.warn(\"The overscanCount prop has been deprecated. \" + \"Please use the overscanColumnCount and overscanRowCount props instead.\");\n            }\n        }\n        if (typeof overscanColumnsCount === \"number\" || typeof overscanRowsCount === \"number\") {\n            if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n                devWarningsOverscanRowsColumnsCount.add(instance);\n                console.warn(\"The overscanColumnsCount and overscanRowsCount props have been deprecated. \" + \"Please use the overscanColumnCount and overscanRowCount props instead.\");\n            }\n        }\n        if (innerTagName != null || outerTagName != null) {\n            if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n                devWarningsTagName.add(instance);\n                console.warn(\"The innerTagName and outerTagName props have been deprecated. \" + \"Please use the innerElementType and outerElementType props instead.\");\n            }\n        }\n        if (children == null) {\n            throw Error('An invalid \"children\" prop has been specified. ' + \"Value should be a React component. \" + ('\"' + (children === null ? \"null\" : typeof children) + '\" was specified.'));\n        }\n        switch(direction){\n            case \"ltr\":\n            case \"rtl\":\n                break;\n            default:\n                throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + ('\"' + direction + '\" was specified.'));\n        }\n        if (typeof width !== \"number\") {\n            throw Error('An invalid \"width\" prop has been specified. ' + \"Grids must specify a number for width. \" + ('\"' + (width === null ? \"null\" : typeof width) + '\" was specified.'));\n        }\n        if (typeof height !== \"number\") {\n            throw Error('An invalid \"height\" prop has been specified. ' + \"Grids must specify a number for height. \" + ('\"' + (height === null ? \"null\" : typeof height) + '\" was specified.'));\n        }\n    }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n    var rowCount = _ref.rowCount;\n    var rowMetadataMap = _ref2.rowMetadataMap, estimatedRowHeight = _ref2.estimatedRowHeight, lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n    var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n    // https://github.com/bvaughn/react-window/pull/138\n    if (lastMeasuredRowIndex >= rowCount) {\n        lastMeasuredRowIndex = rowCount - 1;\n    }\n    if (lastMeasuredRowIndex >= 0) {\n        var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n        totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n    }\n    var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n    var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n    return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n    var columnCount = _ref3.columnCount;\n    var columnMetadataMap = _ref4.columnMetadataMap, estimatedColumnWidth = _ref4.estimatedColumnWidth, lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n    var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n    // https://github.com/bvaughn/react-window/pull/138\n    if (lastMeasuredColumnIndex >= columnCount) {\n        lastMeasuredColumnIndex = columnCount - 1;\n    }\n    if (lastMeasuredColumnIndex >= 0) {\n        var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n        totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n    }\n    var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n    var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n    return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n    var itemMetadataMap, itemSize, lastMeasuredIndex;\n    if (itemType === \"column\") {\n        itemMetadataMap = instanceProps.columnMetadataMap;\n        itemSize = props.columnWidth;\n        lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n    } else {\n        itemMetadataMap = instanceProps.rowMetadataMap;\n        itemSize = props.rowHeight;\n        lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n    }\n    if (index > lastMeasuredIndex) {\n        var offset = 0;\n        if (lastMeasuredIndex >= 0) {\n            var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n            offset = itemMetadata.offset + itemMetadata.size;\n        }\n        for(var i = lastMeasuredIndex + 1; i <= index; i++){\n            var size = itemSize(i);\n            itemMetadataMap[i] = {\n                offset: offset,\n                size: size\n            };\n            offset += size;\n        }\n        if (itemType === \"column\") {\n            instanceProps.lastMeasuredColumnIndex = index;\n        } else {\n            instanceProps.lastMeasuredRowIndex = index;\n        }\n    }\n    return itemMetadataMap[index];\n};\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n    var itemMetadataMap, lastMeasuredIndex;\n    if (itemType === \"column\") {\n        itemMetadataMap = instanceProps.columnMetadataMap;\n        lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n    } else {\n        itemMetadataMap = instanceProps.rowMetadataMap;\n        lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n    }\n    var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n    if (lastMeasuredItemOffset >= offset) {\n        // If we've already measured items within this range just use a binary search as it's faster.\n        return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n    } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n    }\n};\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n    while(low <= high){\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n        if (currentOffset === offset) {\n            return middle;\n        } else if (currentOffset < offset) {\n            low = middle + 1;\n        } else if (currentOffset > offset) {\n            high = middle - 1;\n        }\n    }\n    if (low > 0) {\n        return low - 1;\n    } else {\n        return 0;\n    }\n};\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n    var itemCount = itemType === \"column\" ? props.columnCount : props.rowCount;\n    var interval = 1;\n    while(index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset){\n        index += interval;\n        interval *= 2;\n    }\n    return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var size = itemType === \"column\" ? props.width : props.height;\n    var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    var estimatedTotalSize = itemType === \"column\" ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n    if (align === \"smart\") {\n        if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n            align = \"auto\";\n        } else {\n            align = \"center\";\n        }\n    }\n    switch(align){\n        case \"start\":\n            return maxOffset;\n        case \"end\":\n            return minOffset;\n        case \"center\":\n            return Math.round(minOffset + (maxOffset - minOffset) / 2);\n        case \"auto\":\n        default:\n            if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n                return scrollOffset;\n            } else if (minOffset > maxOffset) {\n                // Because we only take into account the scrollbar size when calculating minOffset\n                // this value can be larger than maxOffset when at the end of the list\n                return minOffset;\n            } else if (scrollOffset < minOffset) {\n                return minOffset;\n            } else {\n                return maxOffset;\n            }\n    }\n};\nvar VariableSizeGrid = /*#__PURE__*/ createGridComponent({\n    getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n        return getItemMetadata(\"column\", props, index, instanceProps).offset;\n    },\n    getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n        return findNearestItem(\"column\", props, instanceProps, scrollLeft);\n    },\n    getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n        var columnCount = props.columnCount, width = props.width;\n        var itemMetadata = getItemMetadata(\"column\", props, startIndex, instanceProps);\n        var maxOffset = scrollLeft + width;\n        var offset = itemMetadata.offset + itemMetadata.size;\n        var stopIndex = startIndex;\n        while(stopIndex < columnCount - 1 && offset < maxOffset){\n            stopIndex++;\n            offset += getItemMetadata(\"column\", props, stopIndex, instanceProps).size;\n        }\n        return stopIndex;\n    },\n    getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n        return instanceProps.columnMetadataMap[index].size;\n    },\n    getEstimatedTotalHeight: getEstimatedTotalHeight,\n    getEstimatedTotalWidth: getEstimatedTotalWidth,\n    getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n        return getOffsetForIndexAndAlignment(\"column\", props, index, align, scrollOffset, instanceProps, scrollbarSize);\n    },\n    getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n        return getOffsetForIndexAndAlignment(\"row\", props, index, align, scrollOffset, instanceProps, scrollbarSize);\n    },\n    getRowOffset: function getRowOffset(props, index, instanceProps) {\n        return getItemMetadata(\"row\", props, index, instanceProps).offset;\n    },\n    getRowHeight: function getRowHeight(props, index, instanceProps) {\n        return instanceProps.rowMetadataMap[index].size;\n    },\n    getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n        return findNearestItem(\"row\", props, instanceProps, scrollTop);\n    },\n    getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n        var rowCount = props.rowCount, height = props.height;\n        var itemMetadata = getItemMetadata(\"row\", props, startIndex, instanceProps);\n        var maxOffset = scrollTop + height;\n        var offset = itemMetadata.offset + itemMetadata.size;\n        var stopIndex = startIndex;\n        while(stopIndex < rowCount - 1 && offset < maxOffset){\n            stopIndex++;\n            offset += getItemMetadata(\"row\", props, stopIndex, instanceProps).size;\n        }\n        return stopIndex;\n    },\n    initInstanceProps: function initInstanceProps(props, instance) {\n        var _ref5 = props, estimatedColumnWidth = _ref5.estimatedColumnWidth, estimatedRowHeight = _ref5.estimatedRowHeight;\n        var instanceProps = {\n            columnMetadataMap: {},\n            estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n            estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n            lastMeasuredColumnIndex: -1,\n            lastMeasuredRowIndex: -1,\n            rowMetadataMap: {}\n        };\n        instance.resetAfterColumnIndex = function(columnIndex, shouldForceUpdate) {\n            if (shouldForceUpdate === void 0) {\n                shouldForceUpdate = true;\n            }\n            instance.resetAfterIndices({\n                columnIndex: columnIndex,\n                shouldForceUpdate: shouldForceUpdate\n            });\n        };\n        instance.resetAfterRowIndex = function(rowIndex, shouldForceUpdate) {\n            if (shouldForceUpdate === void 0) {\n                shouldForceUpdate = true;\n            }\n            instance.resetAfterIndices({\n                rowIndex: rowIndex,\n                shouldForceUpdate: shouldForceUpdate\n            });\n        };\n        instance.resetAfterIndices = function(_ref6) {\n            var columnIndex = _ref6.columnIndex, rowIndex = _ref6.rowIndex, _ref6$shouldForceUpda = _ref6.shouldForceUpdate, shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n            if (typeof columnIndex === \"number\") {\n                instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n            }\n            if (typeof rowIndex === \"number\") {\n                instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n            } // We could potentially optimize further by only evicting styles after this index,\n            // But since styles are only cached while scrolling is in progress-\n            // It seems an unnecessary optimization.\n            // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n            instance._getItemStyleCache(-1);\n            if (shouldForceUpdate) {\n                instance.forceUpdate();\n            }\n        };\n        return instanceProps;\n    },\n    shouldResetStyleCacheOnItemSizeChange: false,\n    validateProps: function validateProps(_ref7) {\n        var columnWidth = _ref7.columnWidth, rowHeight = _ref7.rowHeight;\n        if (true) {\n            if (typeof columnWidth !== \"function\") {\n                throw Error('An invalid \"columnWidth\" prop has been specified. ' + \"Value should be a function. \" + ('\"' + (columnWidth === null ? \"null\" : typeof columnWidth) + '\" was specified.'));\n            } else if (typeof rowHeight !== \"function\") {\n                throw Error('An invalid \"rowHeight\" prop has been specified. ' + \"Value should be a function. \" + ('\"' + (rowHeight === null ? \"null\" : typeof rowHeight) + '\" was specified.'));\n            }\n        }\n    }\n});\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n    return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\nif (true) {\n    if (false) {}\n}\nfunction createListComponent(_ref) {\n    var _class;\n    var getItemOffset = _ref.getItemOffset, getEstimatedTotalSize = _ref.getEstimatedTotalSize, getItemSize = _ref.getItemSize, getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment, getStartIndexForOffset = _ref.getStartIndexForOffset, getStopIndexForStartIndex = _ref.getStopIndexForStartIndex, initInstanceProps = _ref.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange, validateProps = _ref.validateProps;\n    return _class = /*#__PURE__*/ function(_PureComponent) {\n        (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(List, _PureComponent);\n        // Always use explicit constructor for React components.\n        // It produces less code after transpilation. (#26)\n        // eslint-disable-next-line no-useless-constructor\n        function List(props) {\n            var _this;\n            _this = _PureComponent.call(this, props) || this;\n            _this._instanceProps = initInstanceProps(_this.props, (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this));\n            _this._outerRef = void 0;\n            _this._resetIsScrollingTimeoutId = null;\n            _this.state = {\n                instance: (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this),\n                isScrolling: false,\n                scrollDirection: \"forward\",\n                scrollOffset: typeof _this.props.initialScrollOffset === \"number\" ? _this.props.initialScrollOffset : 0,\n                scrollUpdateWasRequested: false\n            };\n            _this._callOnItemsRendered = void 0;\n            _this._callOnItemsRendered = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function(overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n                return _this.props.onItemsRendered({\n                    overscanStartIndex: overscanStartIndex,\n                    overscanStopIndex: overscanStopIndex,\n                    visibleStartIndex: visibleStartIndex,\n                    visibleStopIndex: visibleStopIndex\n                });\n            });\n            _this._callOnScroll = void 0;\n            _this._callOnScroll = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function(scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n                return _this.props.onScroll({\n                    scrollDirection: scrollDirection,\n                    scrollOffset: scrollOffset,\n                    scrollUpdateWasRequested: scrollUpdateWasRequested\n                });\n            });\n            _this._getItemStyle = void 0;\n            _this._getItemStyle = function(index) {\n                var _this$props = _this.props, direction = _this$props.direction, itemSize = _this$props.itemSize, layout = _this$props.layout;\n                var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n                var style;\n                if (itemStyleCache.hasOwnProperty(index)) {\n                    style = itemStyleCache[index];\n                } else {\n                    var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n                    var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n                    var isHorizontal = direction === \"horizontal\" || layout === \"horizontal\";\n                    var isRtl = direction === \"rtl\";\n                    var offsetHorizontal = isHorizontal ? _offset : 0;\n                    itemStyleCache[index] = style = {\n                        position: \"absolute\",\n                        left: isRtl ? undefined : offsetHorizontal,\n                        right: isRtl ? offsetHorizontal : undefined,\n                        top: !isHorizontal ? _offset : 0,\n                        height: !isHorizontal ? size : \"100%\",\n                        width: isHorizontal ? size : \"100%\"\n                    };\n                }\n                return style;\n            };\n            _this._getItemStyleCache = void 0;\n            _this._getItemStyleCache = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function(_, __, ___) {\n                return {};\n            });\n            _this._onScrollHorizontal = function(event) {\n                var _event$currentTarget = event.currentTarget, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollWidth = _event$currentTarget.scrollWidth;\n                _this.setState(function(prevState) {\n                    if (prevState.scrollOffset === scrollLeft) {\n                        // Scroll position may have been updated by cDM/cDU,\n                        // In which case we don't need to trigger another render,\n                        // And we don't want to update state.isScrolling.\n                        return null;\n                    }\n                    var direction = _this.props.direction;\n                    var scrollOffset = scrollLeft;\n                    if (direction === \"rtl\") {\n                        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n                        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n                        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n                        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n                        switch(getRTLOffsetType()){\n                            case \"negative\":\n                                scrollOffset = -scrollLeft;\n                                break;\n                            case \"positive-descending\":\n                                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                                break;\n                        }\n                    } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n                    scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n                    return {\n                        isScrolling: true,\n                        scrollDirection: prevState.scrollOffset < scrollOffset ? \"forward\" : \"backward\",\n                        scrollOffset: scrollOffset,\n                        scrollUpdateWasRequested: false\n                    };\n                }, _this._resetIsScrollingDebounced);\n            };\n            _this._onScrollVertical = function(event) {\n                var _event$currentTarget2 = event.currentTarget, clientHeight = _event$currentTarget2.clientHeight, scrollHeight = _event$currentTarget2.scrollHeight, scrollTop = _event$currentTarget2.scrollTop;\n                _this.setState(function(prevState) {\n                    if (prevState.scrollOffset === scrollTop) {\n                        // Scroll position may have been updated by cDM/cDU,\n                        // In which case we don't need to trigger another render,\n                        // And we don't want to update state.isScrolling.\n                        return null;\n                    } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n                    var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n                    return {\n                        isScrolling: true,\n                        scrollDirection: prevState.scrollOffset < scrollOffset ? \"forward\" : \"backward\",\n                        scrollOffset: scrollOffset,\n                        scrollUpdateWasRequested: false\n                    };\n                }, _this._resetIsScrollingDebounced);\n            };\n            _this._outerRefSetter = function(ref) {\n                var outerRef = _this.props.outerRef;\n                _this._outerRef = ref;\n                if (typeof outerRef === \"function\") {\n                    outerRef(ref);\n                } else if (outerRef != null && typeof outerRef === \"object\" && outerRef.hasOwnProperty(\"current\")) {\n                    outerRef.current = ref;\n                }\n            };\n            _this._resetIsScrollingDebounced = function() {\n                if (_this._resetIsScrollingTimeoutId !== null) {\n                    cancelTimeout(_this._resetIsScrollingTimeoutId);\n                }\n                _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n            };\n            _this._resetIsScrolling = function() {\n                _this._resetIsScrollingTimeoutId = null;\n                _this.setState({\n                    isScrolling: false\n                }, function() {\n                    // Clear style cache after state update has been committed.\n                    // This way we don't break pure sCU for items that don't use isScrolling param.\n                    _this._getItemStyleCache(-1, null);\n                });\n            };\n            return _this;\n        }\n        List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n            validateSharedProps$1(nextProps, prevState);\n            validateProps(nextProps);\n            return null;\n        };\n        var _proto = List.prototype;\n        _proto.scrollTo = function scrollTo(scrollOffset) {\n            scrollOffset = Math.max(0, scrollOffset);\n            this.setState(function(prevState) {\n                if (prevState.scrollOffset === scrollOffset) {\n                    return null;\n                }\n                return {\n                    scrollDirection: prevState.scrollOffset < scrollOffset ? \"forward\" : \"backward\",\n                    scrollOffset: scrollOffset,\n                    scrollUpdateWasRequested: true\n                };\n            }, this._resetIsScrollingDebounced);\n        };\n        _proto.scrollToItem = function scrollToItem(index, align) {\n            if (align === void 0) {\n                align = \"auto\";\n            }\n            var _this$props2 = this.props, itemCount = _this$props2.itemCount, layout = _this$props2.layout;\n            var scrollOffset = this.state.scrollOffset;\n            index = Math.max(0, Math.min(index, itemCount - 1)); // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n            // But we only need to account for its size when it's actually visible.\n            // This is an edge case for lists; normally they only scroll in the dominant direction.\n            var scrollbarSize = 0;\n            if (this._outerRef) {\n                var outerRef = this._outerRef;\n                if (layout === \"vertical\") {\n                    scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;\n                } else {\n                    scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;\n                }\n            }\n            this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));\n        };\n        _proto.componentDidMount = function componentDidMount() {\n            var _this$props3 = this.props, direction = _this$props3.direction, initialScrollOffset = _this$props3.initialScrollOffset, layout = _this$props3.layout;\n            if (typeof initialScrollOffset === \"number\" && this._outerRef != null) {\n                var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n                if (direction === \"horizontal\" || layout === \"horizontal\") {\n                    outerRef.scrollLeft = initialScrollOffset;\n                } else {\n                    outerRef.scrollTop = initialScrollOffset;\n                }\n            }\n            this._callPropsCallbacks();\n        };\n        _proto.componentDidUpdate = function componentDidUpdate() {\n            var _this$props4 = this.props, direction = _this$props4.direction, layout = _this$props4.layout;\n            var _this$state = this.state, scrollOffset = _this$state.scrollOffset, scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n            if (scrollUpdateWasRequested && this._outerRef != null) {\n                var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n                if (direction === \"horizontal\" || layout === \"horizontal\") {\n                    if (direction === \"rtl\") {\n                        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n                        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n                        // So we need to determine which browser behavior we're dealing with, and mimic it.\n                        switch(getRTLOffsetType()){\n                            case \"negative\":\n                                outerRef.scrollLeft = -scrollOffset;\n                                break;\n                            case \"positive-ascending\":\n                                outerRef.scrollLeft = scrollOffset;\n                                break;\n                            default:\n                                var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;\n                                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                                break;\n                        }\n                    } else {\n                        outerRef.scrollLeft = scrollOffset;\n                    }\n                } else {\n                    outerRef.scrollTop = scrollOffset;\n                }\n            }\n            this._callPropsCallbacks();\n        };\n        _proto.componentWillUnmount = function componentWillUnmount() {\n            if (this._resetIsScrollingTimeoutId !== null) {\n                cancelTimeout(this._resetIsScrollingTimeoutId);\n            }\n        };\n        _proto.render = function render() {\n            var _this$props5 = this.props, children = _this$props5.children, className = _this$props5.className, direction = _this$props5.direction, height = _this$props5.height, innerRef = _this$props5.innerRef, innerElementType = _this$props5.innerElementType, innerTagName = _this$props5.innerTagName, itemCount = _this$props5.itemCount, itemData = _this$props5.itemData, _this$props5$itemKey = _this$props5.itemKey, itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey, layout = _this$props5.layout, outerElementType = _this$props5.outerElementType, outerTagName = _this$props5.outerTagName, style = _this$props5.style, useIsScrolling = _this$props5.useIsScrolling, width = _this$props5.width;\n            var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n            var isHorizontal = direction === \"horizontal\" || layout === \"horizontal\";\n            var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n            var _this$_getRangeToRend = this._getRangeToRender(), startIndex = _this$_getRangeToRend[0], stopIndex = _this$_getRangeToRend[1];\n            var items = [];\n            if (itemCount > 0) {\n                for(var _index = startIndex; _index <= stopIndex; _index++){\n                    items.push(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(children, {\n                        data: itemData,\n                        key: itemKey(_index, itemData),\n                        index: _index,\n                        isScrolling: useIsScrolling ? isScrolling : undefined,\n                        style: this._getItemStyle(_index)\n                    }));\n                }\n            } // Read this value AFTER items have been created,\n            // So their actual sizes (if variable) are taken into consideration.\n            var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(outerElementType || outerTagName || \"div\", {\n                className: className,\n                onScroll: onScroll,\n                ref: this._outerRefSetter,\n                style: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n                    position: \"relative\",\n                    height: height,\n                    width: width,\n                    overflow: \"auto\",\n                    WebkitOverflowScrolling: \"touch\",\n                    willChange: \"transform\",\n                    direction: direction\n                }, style)\n            }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(innerElementType || innerTagName || \"div\", {\n                children: items,\n                ref: innerRef,\n                style: {\n                    height: isHorizontal ? \"100%\" : estimatedTotalSize,\n                    pointerEvents: isScrolling ? \"none\" : undefined,\n                    width: isHorizontal ? estimatedTotalSize : \"100%\"\n                }\n            }));\n        };\n        _proto._callPropsCallbacks = function _callPropsCallbacks() {\n            if (typeof this.props.onItemsRendered === \"function\") {\n                var itemCount = this.props.itemCount;\n                if (itemCount > 0) {\n                    var _this$_getRangeToRend2 = this._getRangeToRender(), _overscanStartIndex = _this$_getRangeToRend2[0], _overscanStopIndex = _this$_getRangeToRend2[1], _visibleStartIndex = _this$_getRangeToRend2[2], _visibleStopIndex = _this$_getRangeToRend2[3];\n                    this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n                }\n            }\n            if (typeof this.props.onScroll === \"function\") {\n                var _this$state2 = this.state, _scrollDirection = _this$state2.scrollDirection, _scrollOffset = _this$state2.scrollOffset, _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n                this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n            }\n        } // Lazily create and cache item styles while scrolling,\n        ;\n        _proto._getRangeToRender = function _getRangeToRender() {\n            var _this$props6 = this.props, itemCount = _this$props6.itemCount, overscanCount = _this$props6.overscanCount;\n            var _this$state3 = this.state, isScrolling = _this$state3.isScrolling, scrollDirection = _this$state3.scrollDirection, scrollOffset = _this$state3.scrollOffset;\n            if (itemCount === 0) {\n                return [\n                    0,\n                    0,\n                    0,\n                    0\n                ];\n            }\n            var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n            var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n            // If there isn't at least one extra item, tab loops back around.\n            var overscanBackward = !isScrolling || scrollDirection === \"backward\" ? Math.max(1, overscanCount) : 1;\n            var overscanForward = !isScrolling || scrollDirection === \"forward\" ? Math.max(1, overscanCount) : 1;\n            return [\n                Math.max(0, startIndex - overscanBackward),\n                Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n                startIndex,\n                stopIndex\n            ];\n        };\n        return List;\n    }(react__WEBPACK_IMPORTED_MODULE_3__.PureComponent), _class.defaultProps = {\n        direction: \"ltr\",\n        itemData: undefined,\n        layout: \"vertical\",\n        overscanCount: 2,\n        useIsScrolling: false\n    }, _class;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n    var children = _ref2.children, direction = _ref2.direction, height = _ref2.height, layout = _ref2.layout, innerTagName = _ref2.innerTagName, outerTagName = _ref2.outerTagName, width = _ref2.width;\n    var instance = _ref3.instance;\n    if (true) {\n        if (innerTagName != null || outerTagName != null) {\n            if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n                devWarningsTagName$1.add(instance);\n                console.warn(\"The innerTagName and outerTagName props have been deprecated. \" + \"Please use the innerElementType and outerElementType props instead.\");\n            }\n        } // TODO Deprecate direction \"horizontal\"\n        var isHorizontal = direction === \"horizontal\" || layout === \"horizontal\";\n        switch(direction){\n            case \"horizontal\":\n            case \"vertical\":\n                if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n                    devWarningsDirection.add(instance);\n                    console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n                }\n                break;\n            case \"ltr\":\n            case \"rtl\":\n                break;\n            default:\n                throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + ('\"' + direction + '\" was specified.'));\n        }\n        switch(layout){\n            case \"horizontal\":\n            case \"vertical\":\n                break;\n            default:\n                throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + ('\"' + layout + '\" was specified.'));\n        }\n        if (children == null) {\n            throw Error('An invalid \"children\" prop has been specified. ' + \"Value should be a React component. \" + ('\"' + (children === null ? \"null\" : typeof children) + '\" was specified.'));\n        }\n        if (isHorizontal && typeof width !== \"number\") {\n            throw Error('An invalid \"width\" prop has been specified. ' + \"Horizontal lists must specify a number for width. \" + ('\"' + (width === null ? \"null\" : typeof width) + '\" was specified.'));\n        } else if (!isHorizontal && typeof height !== \"number\") {\n            throw Error('An invalid \"height\" prop has been specified. ' + \"Vertical lists must specify a number for height. \" + ('\"' + (height === null ? \"null\" : typeof height) + '\" was specified.'));\n        }\n    }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n    var _ref = props, itemSize = _ref.itemSize;\n    var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n    if (index > lastMeasuredIndex) {\n        var offset = 0;\n        if (lastMeasuredIndex >= 0) {\n            var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n            offset = itemMetadata.offset + itemMetadata.size;\n        }\n        for(var i = lastMeasuredIndex + 1; i <= index; i++){\n            var size = itemSize(i);\n            itemMetadataMap[i] = {\n                offset: offset,\n                size: size\n            };\n            offset += size;\n        }\n        instanceProps.lastMeasuredIndex = index;\n    }\n    return itemMetadataMap[index];\n};\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n    var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n    var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n    if (lastMeasuredItemOffset >= offset) {\n        // If we've already measured items within this range just use a binary search as it's faster.\n        return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n    } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n    }\n};\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n    while(low <= high){\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n        if (currentOffset === offset) {\n            return middle;\n        } else if (currentOffset < offset) {\n            low = middle + 1;\n        } else if (currentOffset > offset) {\n            high = middle - 1;\n        }\n    }\n    if (low > 0) {\n        return low - 1;\n    } else {\n        return 0;\n    }\n};\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n    var itemCount = props.itemCount;\n    var interval = 1;\n    while(index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset){\n        index += interval;\n        interval *= 2;\n    }\n    return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n    var itemCount = _ref2.itemCount;\n    var itemMetadataMap = _ref3.itemMetadataMap, estimatedItemSize = _ref3.estimatedItemSize, lastMeasuredIndex = _ref3.lastMeasuredIndex;\n    var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n    // https://github.com/bvaughn/react-window/pull/138\n    if (lastMeasuredIndex >= itemCount) {\n        lastMeasuredIndex = itemCount - 1;\n    }\n    if (lastMeasuredIndex >= 0) {\n        var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n        totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n    }\n    var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n    var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n    return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\nvar VariableSizeList = /*#__PURE__*/ createListComponent({\n    getItemOffset: function getItemOffset(props, index, instanceProps) {\n        return getItemMetadata$1(props, index, instanceProps).offset;\n    },\n    getItemSize: function getItemSize(props, index, instanceProps) {\n        return instanceProps.itemMetadataMap[index].size;\n    },\n    getEstimatedTotalSize: getEstimatedTotalSize,\n    getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n        var direction = props.direction, height = props.height, layout = props.layout, width = props.width; // TODO Deprecate direction \"horizontal\"\n        var isHorizontal = direction === \"horizontal\" || layout === \"horizontal\";\n        var size = isHorizontal ? width : height;\n        var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n        // To ensure it reflects actual measurements instead of just estimates.\n        var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n        var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n        var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size + scrollbarSize);\n        if (align === \"smart\") {\n            if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n                align = \"auto\";\n            } else {\n                align = \"center\";\n            }\n        }\n        switch(align){\n            case \"start\":\n                return maxOffset;\n            case \"end\":\n                return minOffset;\n            case \"center\":\n                return Math.round(minOffset + (maxOffset - minOffset) / 2);\n            case \"auto\":\n            default:\n                if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n                    return scrollOffset;\n                } else if (scrollOffset < minOffset) {\n                    return minOffset;\n                } else {\n                    return maxOffset;\n                }\n        }\n    },\n    getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n        return findNearestItem$1(props, instanceProps, offset);\n    },\n    getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n        var direction = props.direction, height = props.height, itemCount = props.itemCount, layout = props.layout, width = props.width; // TODO Deprecate direction \"horizontal\"\n        var isHorizontal = direction === \"horizontal\" || layout === \"horizontal\";\n        var size = isHorizontal ? width : height;\n        var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n        var maxOffset = scrollOffset + size;\n        var offset = itemMetadata.offset + itemMetadata.size;\n        var stopIndex = startIndex;\n        while(stopIndex < itemCount - 1 && offset < maxOffset){\n            stopIndex++;\n            offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n        }\n        return stopIndex;\n    },\n    initInstanceProps: function initInstanceProps(props, instance) {\n        var _ref4 = props, estimatedItemSize = _ref4.estimatedItemSize;\n        var instanceProps = {\n            itemMetadataMap: {},\n            estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n            lastMeasuredIndex: -1\n        };\n        instance.resetAfterIndex = function(index, shouldForceUpdate) {\n            if (shouldForceUpdate === void 0) {\n                shouldForceUpdate = true;\n            }\n            instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n            // But since styles are only cached while scrolling is in progress-\n            // It seems an unnecessary optimization.\n            // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n            instance._getItemStyleCache(-1);\n            if (shouldForceUpdate) {\n                instance.forceUpdate();\n            }\n        };\n        return instanceProps;\n    },\n    shouldResetStyleCacheOnItemSizeChange: false,\n    validateProps: function validateProps(_ref5) {\n        var itemSize = _ref5.itemSize;\n        if (true) {\n            if (typeof itemSize !== \"function\") {\n                throw Error('An invalid \"itemSize\" prop has been specified. ' + \"Value should be a function. \" + ('\"' + (itemSize === null ? \"null\" : typeof itemSize) + '\" was specified.'));\n            }\n        }\n    }\n});\nvar FixedSizeGrid = /*#__PURE__*/ createGridComponent({\n    getColumnOffset: function getColumnOffset(_ref, index) {\n        var columnWidth = _ref.columnWidth;\n        return index * columnWidth;\n    },\n    getColumnWidth: function getColumnWidth(_ref2, index) {\n        var columnWidth = _ref2.columnWidth;\n        return columnWidth;\n    },\n    getRowOffset: function getRowOffset(_ref3, index) {\n        var rowHeight = _ref3.rowHeight;\n        return index * rowHeight;\n    },\n    getRowHeight: function getRowHeight(_ref4, index) {\n        var rowHeight = _ref4.rowHeight;\n        return rowHeight;\n    },\n    getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n        var rowCount = _ref5.rowCount, rowHeight = _ref5.rowHeight;\n        return rowHeight * rowCount;\n    },\n    getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n        var columnCount = _ref6.columnCount, columnWidth = _ref6.columnWidth;\n        return columnWidth * columnCount;\n    },\n    getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n        var columnCount = _ref7.columnCount, columnWidth = _ref7.columnWidth, width = _ref7.width;\n        var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n        var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n        var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n        if (align === \"smart\") {\n            if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n                align = \"auto\";\n            } else {\n                align = \"center\";\n            }\n        }\n        switch(align){\n            case \"start\":\n                return maxOffset;\n            case \"end\":\n                return minOffset;\n            case \"center\":\n                // \"Centered\" offset is usually the average of the min and max.\n                // But near the edges of the list, this doesn't hold true.\n                var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n                if (middleOffset < Math.ceil(width / 2)) {\n                    return 0; // near the beginning\n                } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n                    return lastColumnOffset; // near the end\n                } else {\n                    return middleOffset;\n                }\n            case \"auto\":\n            default:\n                if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n                    return scrollLeft;\n                } else if (minOffset > maxOffset) {\n                    // Because we only take into account the scrollbar size when calculating minOffset\n                    // this value can be larger than maxOffset when at the end of the list\n                    return minOffset;\n                } else if (scrollLeft < minOffset) {\n                    return minOffset;\n                } else {\n                    return maxOffset;\n                }\n        }\n    },\n    getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n        var rowHeight = _ref8.rowHeight, height = _ref8.height, rowCount = _ref8.rowCount;\n        var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n        var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n        var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n        if (align === \"smart\") {\n            if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n                align = \"auto\";\n            } else {\n                align = \"center\";\n            }\n        }\n        switch(align){\n            case \"start\":\n                return maxOffset;\n            case \"end\":\n                return minOffset;\n            case \"center\":\n                // \"Centered\" offset is usually the average of the min and max.\n                // But near the edges of the list, this doesn't hold true.\n                var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n                if (middleOffset < Math.ceil(height / 2)) {\n                    return 0; // near the beginning\n                } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n                    return lastRowOffset; // near the end\n                } else {\n                    return middleOffset;\n                }\n            case \"auto\":\n            default:\n                if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n                    return scrollTop;\n                } else if (minOffset > maxOffset) {\n                    // Because we only take into account the scrollbar size when calculating minOffset\n                    // this value can be larger than maxOffset when at the end of the list\n                    return minOffset;\n                } else if (scrollTop < minOffset) {\n                    return minOffset;\n                } else {\n                    return maxOffset;\n                }\n        }\n    },\n    getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n        var columnWidth = _ref9.columnWidth, columnCount = _ref9.columnCount;\n        return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n    },\n    getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n        var columnWidth = _ref10.columnWidth, columnCount = _ref10.columnCount, width = _ref10.width;\n        var left = startIndex * columnWidth;\n        var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n        return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n        ));\n    },\n    getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n        var rowHeight = _ref11.rowHeight, rowCount = _ref11.rowCount;\n        return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n    },\n    getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n        var rowHeight = _ref12.rowHeight, rowCount = _ref12.rowCount, height = _ref12.height;\n        var top = startIndex * rowHeight;\n        var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n        return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n        ));\n    },\n    initInstanceProps: function initInstanceProps(props) {},\n    shouldResetStyleCacheOnItemSizeChange: true,\n    validateProps: function validateProps(_ref13) {\n        var columnWidth = _ref13.columnWidth, rowHeight = _ref13.rowHeight;\n        if (true) {\n            if (typeof columnWidth !== \"number\") {\n                throw Error('An invalid \"columnWidth\" prop has been specified. ' + \"Value should be a number. \" + ('\"' + (columnWidth === null ? \"null\" : typeof columnWidth) + '\" was specified.'));\n            }\n            if (typeof rowHeight !== \"number\") {\n                throw Error('An invalid \"rowHeight\" prop has been specified. ' + \"Value should be a number. \" + ('\"' + (rowHeight === null ? \"null\" : typeof rowHeight) + '\" was specified.'));\n            }\n        }\n    }\n});\nvar FixedSizeList = /*#__PURE__*/ createListComponent({\n    getItemOffset: function getItemOffset(_ref, index) {\n        var itemSize = _ref.itemSize;\n        return index * itemSize;\n    },\n    getItemSize: function getItemSize(_ref2, index) {\n        var itemSize = _ref2.itemSize;\n        return itemSize;\n    },\n    getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n        var itemCount = _ref3.itemCount, itemSize = _ref3.itemSize;\n        return itemSize * itemCount;\n    },\n    getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {\n        var direction = _ref4.direction, height = _ref4.height, itemCount = _ref4.itemCount, itemSize = _ref4.itemSize, layout = _ref4.layout, width = _ref4.width;\n        // TODO Deprecate direction \"horizontal\"\n        var isHorizontal = direction === \"horizontal\" || layout === \"horizontal\";\n        var size = isHorizontal ? width : height;\n        var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n        var maxOffset = Math.min(lastItemOffset, index * itemSize);\n        var minOffset = Math.max(0, index * itemSize - size + itemSize + scrollbarSize);\n        if (align === \"smart\") {\n            if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n                align = \"auto\";\n            } else {\n                align = \"center\";\n            }\n        }\n        switch(align){\n            case \"start\":\n                return maxOffset;\n            case \"end\":\n                return minOffset;\n            case \"center\":\n                {\n                    // \"Centered\" offset is usually the average of the min and max.\n                    // But near the edges of the list, this doesn't hold true.\n                    var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n                    if (middleOffset < Math.ceil(size / 2)) {\n                        return 0; // near the beginning\n                    } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n                        return lastItemOffset; // near the end\n                    } else {\n                        return middleOffset;\n                    }\n                }\n            case \"auto\":\n            default:\n                if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n                    return scrollOffset;\n                } else if (scrollOffset < minOffset) {\n                    return minOffset;\n                } else {\n                    return maxOffset;\n                }\n        }\n    },\n    getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n        var itemCount = _ref5.itemCount, itemSize = _ref5.itemSize;\n        return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n    },\n    getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n        var direction = _ref6.direction, height = _ref6.height, itemCount = _ref6.itemCount, itemSize = _ref6.itemSize, layout = _ref6.layout, width = _ref6.width;\n        // TODO Deprecate direction \"horizontal\"\n        var isHorizontal = direction === \"horizontal\" || layout === \"horizontal\";\n        var offset = startIndex * itemSize;\n        var size = isHorizontal ? width : height;\n        var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n        return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n        ));\n    },\n    initInstanceProps: function initInstanceProps(props) {},\n    shouldResetStyleCacheOnItemSizeChange: true,\n    validateProps: function validateProps(_ref7) {\n        var itemSize = _ref7.itemSize;\n        if (true) {\n            if (typeof itemSize !== \"number\") {\n                throw Error('An invalid \"itemSize\" prop has been specified. ' + \"Value should be a number. \" + ('\"' + (itemSize === null ? \"null\" : typeof itemSize) + '\" was specified.'));\n            }\n        }\n    }\n});\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(prev, next) {\n    for(var attribute in prev){\n        if (!(attribute in next)) {\n            return true;\n        }\n    }\n    for(var _attribute in next){\n        if (prev[_attribute] !== next[_attribute]) {\n            return true;\n        }\n    }\n    return false;\n}\nvar _excluded = [\n    \"style\"\n], _excluded2 = [\n    \"style\"\n];\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nfunction areEqual(prevProps, nextProps) {\n    var prevStyle = prevProps.style, prevRest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(prevProps, _excluded);\n    var nextStyle = nextProps.style, nextRest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(nextProps, _excluded2);\n    return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n}\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nfunction shouldComponentUpdate(nextProps, nextState) {\n    return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-window/dist/index.esm.js\n");

/***/ })

};
;